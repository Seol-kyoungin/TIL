package com.example.counter

import android.app.Activity
import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.core.content.edit
import com.example.counter.ui.theme.CounterTheme
import java.text.SimpleDateFormat

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CounterTheme {
                MainScreen()
            }
        }
    }


    @Composable
    fun MainScreen() {
        val activity = LocalContext.current as? Activity
        val sharedPref = remember {
            activity?.getPreferences(Context.MODE_PRIVATE)
        }
        var time by remember {
            mutableStateOf(sharedPref?.getString("lastTime", "") ?: "")
        }

        Column (
            Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.SpaceBetween){
            var count by remember {
                val saveCount = sharedPref?.getInt("lastCount", 0)
                mutableStateOf(saveCount ?: 0)
            }

            Spacer(modifier = Modifier.height(50.dp))
            Button(onClick = {
                val currentTime: Long = System.currentTimeMillis()
                val dataFormat = SimpleDateFormat("yyyy-MM-dd hh:mm:ss") //년월일
                var data = dataFormat.format(currentTime)
                time = data.format(dataFormat)
                count++
                sharedPref?.edit {
                    putInt("lastCount", count)

                }
            }) {
                Text(text = "카운트 증가 $count")

            }
            Button(onClick = {
                val currentTime: Long = System.currentTimeMillis()
                val dataFormat = SimpleDateFormat("yyyy-MM-dd hh:mm:ss") //년월일
                var data = dataFormat.format(currentTime)
                time = data.format(dataFormat)
                var mCount = count--
                if (mCount == 0) {
                    count = mCount
                    sharedPref?.edit {
                        putInt("lastCount", count)
                    }
                } else {
                    count = count
                }
            }) {
                Text(text = "카운트 감소 $count")

            }
            Button(onClick = {
                val currentTime: Long = System.currentTimeMillis()
                val dataFormat = SimpleDateFormat("yyyy-MM-dd hh:mm:ss") //년월일
                var data = dataFormat.format(currentTime)
                time = data.format(dataFormat)
                val newCount = count * 2

                if (newCount <= Int.MAX_VALUE / 2) {
                    count = newCount
                    sharedPref?.edit {
                        putInt("lastCount", count)
                    }
                } else {
                    count = count
                }
            }) {
                Text(text = "카운트 2배 증가 $count")

            }
            Button(onClick = {
                val currentTime: Long = System.currentTimeMillis()
                val dataFormat = SimpleDateFormat("yyyy-MM-dd hh:mm:ss") //년월일
                var data = dataFormat.format(currentTime)
                time = data.format(dataFormat)
                count /= 2
                sharedPref?.edit {
                    putInt("lastCount", count)

                }
            }) {
                Text(text = "카운트 절반 감소 $count")

            }
            Button(onClick = {
                val currentTime: Long = System.currentTimeMillis()
                val dataFormat = SimpleDateFormat("yyyy-MM-dd hh:mm:ss") //년월일
                var data = dataFormat.format(currentTime)
                time = data.format(dataFormat)
                count = 0
                sharedPref?.edit {
                    putInt("lastCount", count)

                }
            }) {
                Text(text = "카운트 초기화 $count")

            }


            Button(onClick = {
                val currentTime: Long = System.currentTimeMillis()
                val dataFormat = SimpleDateFormat("yyyy-MM-dd hh:mm:ss") //년월일
                var data = dataFormat.format(currentTime)
                time = data.format(dataFormat)

                sharedPref?.edit {
                    putInt("lastCount", count)

                }
            }) {
                Text(text = "현재 시간 저장")

            }
            //Text(text = "현재 시각은 : ${dataFormat.format(currentTime)}")
            Text(text = "실시간 시간 저장 : $time")
            Spacer(modifier = Modifier.height(50.dp))
        }

    }

    @Preview(showBackground = true)
    @Composable
    fun MainScreenPreview() {
        CounterTheme {
            MainScreen()
        }
    }
}
